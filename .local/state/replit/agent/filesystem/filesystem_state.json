{"file_contents":{"replit.md":{"content":"# Overview\n\nThis is a personal static website built with Astro for GitHub Pages hosting. The site features a sophisticated black-themed design with neon accents (purple, pink, blue, silver) and serves as both a professional portfolio and personal blog. It's designed to showcase work as a data engineer/software engineer while maintaining a warm, subtly humorous tone. The architecture emphasizes performance, SEO optimization, and content organization through structured collections.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Framework\n- **Astro 5.12.9** as the primary static site generator, chosen for zero-runtime JavaScript and optimal performance\n- **React 19.1.1** integration via Astro islands for interactive components only where needed\n- **TypeScript 5.9.2** for type safety and better development experience\n- Static generation targeting GitHub Pages deployment\n\n## Styling & Design System\n- **TailwindCSS 4.1.11** with custom configuration for utility-first styling\n- **@tailwindcss/typography** for rich text formatting in blog posts\n- Custom CSS variables defined in global.css for consistent theming (neon colors, grays)\n- **Inter font family** from Google Fonts for modern typography\n- Black primary background with neon accent colors (purple #8B5CF6, pink #EC4899, blue #3B82F6, silver #C0C0C0)\n\n## Content Management\n- **Content Collections** architecture with four main types:\n  - `posts`: Long-form blog content with tags, dates, and featured status\n  - `notes`: Short-form content pieces\n  - `links`: Curated external resources\n  - `pages`: Static pages like about, contact\n- **MDX support** via @astrojs/mdx for rich content authoring\n- **Zod schemas** for content validation and type safety\n- Tag-based filtering system for content organization\n\n## Search & Navigation\n- **Pagefind integration** via astro-pagefind for static site search\n- React-based search component with keyboard shortcuts (Cmd/Ctrl+K)\n- Tag filtering system for content discovery\n- Sitemap generation for SEO\n\n## Performance Optimizations\n- Static site generation for optimal loading speed\n- Astro's selective hydration model (islands architecture)\n- Image optimization through Astro's built-in image processing\n- Minimal JavaScript footprint with React only for interactive components\n\n## SEO & Analytics\n- Sitemap generation via @astrojs/sitemap\n- Robots.txt configuration for search engine indexing\n- Plausible analytics integration (privacy-focused)\n- Meta tags and structured data support\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **Astro ecosystem**: @astrojs/mdx, @astrojs/react, @astrojs/sitemap, @astrojs/tailwind\n- **React ecosystem**: react, react-dom, @types/react, @types/react-dom\n- **Styling**: tailwindcss, @tailwindcss/typography\n\n## Third-party Services\n- **GitHub Pages**: Static hosting platform\n- **Google Fonts**: Inter font family for typography\n- **Plausible Analytics**: Privacy-focused website analytics (configurable via environment variables)\n- **Pagefind**: Static site search functionality via astro-pagefind\n\n## Development Tools\n- **TypeScript**: Type checking and development experience\n- **Astro's TypeScript config**: Strict mode configuration extending astro/tsconfigs/strict\n\n## Content & Media\n- **MDX**: Enhanced Markdown with React component support\n- **Astro Image**: Built-in image optimization and processing\n- **Zod**: Runtime type validation for content schemas\n\nThe architecture prioritizes performance, maintainability, and content organization while providing a sophisticated user experience with minimal complexity.","size_bytes":3649},"vite.config.js":{"content":"import { defineConfig } from 'vite';\n\nexport default defineConfig({\n  server: {\n    host: '0.0.0.0',\n    port: 5000,\n    strictPort: true,\n    allowedHosts: 'all',\n    hmr: {\n      clientPort: 5000,\n      host: 'localhost'\n    }\n  }\n});","size_bytes":236},"src/env.d.ts":{"content":"/// <reference types=\"astro/client\" />\n\ninterface ImportMetaEnv {\n  readonly PLAUSIBLE_DOMAIN?: string;\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv;\n}\n","size_bytes":163},"src/components/Search.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\n\ninterface SearchResult {\n  url: string;\n  title: string;\n  excerpt: string;\n}\n\ninterface SearchProps {\n  className?: string;\n  placeholder?: string;\n}\n\nexport default function Search({ className = '', placeholder = 'Search...' }: SearchProps) {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState<SearchResult[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const searchRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if ((event.metaKey || event.ctrlKey) && event.key === 'k') {\n        event.preventDefault();\n        inputRef.current?.focus();\n      }\n      if (event.key === 'Escape') {\n        setIsOpen(false);\n        inputRef.current?.blur();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, []);\n\n  const performSearch = async (searchQuery: string) => {\n    if (searchQuery.length < 2) {\n      setResults([]);\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      // In a real implementation, this would use Pagefind\n      // For now, we'll simulate search results\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      const mockResults: SearchResult[] = [\n        {\n          url: '/posts/welcome-to-my-site',\n          title: 'Welcome to My Site',\n          excerpt: 'A brief introduction to what you can expect to find here...'\n        },\n        {\n          url: '/posts/data-engineering-insights',\n          title: 'Data Engineering Insights',\n          excerpt: 'Lessons learned from building data pipelines at scale...'\n        }\n      ].filter(result => \n        result.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        result.excerpt.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n      \n      setResults(mockResults);\n    } catch (error) {\n      console.error('Search error:', error);\n      setResults([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    setQuery(value);\n    setIsOpen(true);\n    performSearch(value);\n  };\n\n  return (\n    <div ref={searchRef} className={`relative ${className}`}>\n      <div className=\"relative\">\n        <input\n          ref={inputRef}\n          type=\"text\"\n          value={query}\n          onChange={handleInputChange}\n          onFocus={() => setIsOpen(true)}\n          placeholder={placeholder}\n          className=\"w-full px-4 py-3 pl-12 pr-4 bg-medium-gray border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:border-neon-purple focus:ring-1 focus:ring-neon-purple focus:outline-none transition-all duration-200\"\n        />\n        <svg \n          className=\"absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" \n          fill=\"none\" \n          stroke=\"currentColor\" \n          viewBox=\"0 0 24 24\"\n        >\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"m21 21-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"></path>\n        </svg>\n        <div className=\"absolute right-4 top-1/2 transform -translate-y-1/2\">\n          <kbd className=\"px-2 py-1 text-xs bg-gray-700 rounded border border-gray-600 text-gray-400\">\n            âŒ˜K\n          </kbd>\n        </div>\n      </div>\n\n      {isOpen && (query.length > 0 || results.length > 0) && (\n        <div className=\"absolute top-full left-0 right-0 mt-2 bg-medium-gray border border-gray-600 rounded-lg shadow-xl z-50 max-h-96 overflow-y-auto\">\n          {isLoading ? (\n            <div className=\"p-4 text-center\">\n              <div className=\"animate-spin w-6 h-6 border-2 border-neon-purple border-t-transparent rounded-full mx-auto\"></div>\n              <p className=\"text-gray-400 mt-2\">Searching...</p>\n            </div>\n          ) : results.length > 0 ? (\n            <div className=\"py-2\">\n              {results.map((result, index) => (\n                <a\n                  key={index}\n                  href={result.url}\n                  className=\"block px-4 py-3 hover:bg-gray-700 transition-colors duration-200\"\n                  onClick={() => setIsOpen(false)}\n                >\n                  <h4 className=\"text-white font-medium mb-1\">{result.title}</h4>\n                  <p className=\"text-gray-400 text-sm\">{result.excerpt}</p>\n                </a>\n              ))}\n            </div>\n          ) : query.length > 1 ? (\n            <div className=\"p-4 text-center text-gray-400\">\n              No results found for \"{query}\"\n            </div>\n          ) : (\n            <div className=\"p-4 text-center text-gray-400\">\n              Type to search...\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5332},"src/components/TagFilter.tsx":{"content":"import { useState, useEffect } from 'react';\n\ninterface TagFilterProps {\n  tags: string[];\n  onTagChange: (selectedTags: string[]) => void;\n  className?: string;\n}\n\nexport default function TagFilter({ tags, onTagChange, className = '' }: TagFilterProps) {\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n\n  const toggleTag = (tag: string) => {\n    const newSelectedTags = selectedTags.includes(tag)\n      ? selectedTags.filter(t => t !== tag)\n      : [...selectedTags, tag];\n    \n    setSelectedTags(newSelectedTags);\n    onTagChange(newSelectedTags);\n  };\n\n  const clearAllTags = () => {\n    setSelectedTags([]);\n    onTagChange([]);\n  };\n\n  return (\n    <div className={`space-y-4 ${className}`}>\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-white\">Filter by Tags</h3>\n        {selectedTags.length > 0 && (\n          <button\n            onClick={clearAllTags}\n            className=\"text-sm text-gray-400 hover:text-neon-purple transition-colors duration-200\"\n          >\n            Clear all\n          </button>\n        )}\n      </div>\n      \n      <div className=\"flex flex-wrap gap-2\">\n        {tags.map((tag) => (\n          <button\n            key={tag}\n            onClick={() => toggleTag(tag)}\n            className={`px-3 py-2 text-sm rounded-lg border transition-all duration-200 hover:scale-105 ${\n              selectedTags.includes(tag)\n                ? 'bg-neon-purple text-white border-neon-purple shadow-lg shadow-neon-purple/25'\n                : 'bg-medium-gray text-gray-300 border-gray-600 hover:border-gray-500 hover:text-white'\n            }`}\n          >\n            #{tag}\n            {selectedTags.includes(tag) && (\n              <span className=\"ml-1\">Ã—</span>\n            )}\n          </button>\n        ))}\n      </div>\n      \n      {selectedTags.length > 0 && (\n        <div className=\"text-sm text-gray-400\">\n          {selectedTags.length} tag{selectedTags.length !== 1 ? 's' : ''} selected\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":2049},"src/content/config.ts":{"content":"import { defineCollection, z } from 'astro:content';\n\nconst posts = defineCollection({\n  type: 'content',\n  schema: z.object({\n    title: z.string(),\n    description: z.string(),\n    pubDate: z.coerce.date(),\n    updatedDate: z.coerce.date().optional(),\n    image: z.string().optional(),\n    tags: z.array(z.string()),\n    draft: z.boolean().default(false),\n    featured: z.boolean().default(false),\n  }),\n});\n\nconst notes = defineCollection({\n  type: 'content',\n  schema: z.object({\n    title: z.string(),\n    description: z.string().optional(),\n    pubDate: z.coerce.date(),\n    tags: z.array(z.string()).default([]),\n  }),\n});\n\nconst links = defineCollection({\n  type: 'content',\n  schema: z.object({\n    title: z.string(),\n    description: z.string(),\n    url: z.string().url(),\n    category: z.string(),\n    tags: z.array(z.string()).default([]),\n    pubDate: z.coerce.date(),\n  }),\n});\n\nconst pages = defineCollection({\n  type: 'content',\n  schema: z.object({\n    title: z.string(),\n    description: z.string(),\n    updatedDate: z.coerce.date().optional(),\n  }),\n});\n\nexport const collections = {\n  posts,\n  notes,\n  links,\n  pages,\n};\n","size_bytes":1142},"src/styles/global.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Import fonts */\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n/* CSS Variables for consistent theming */\n:root {\n  --color-neon-purple: #8B5CF6;\n  --color-neon-pink: #EC4899;\n  --color-neon-blue: #3B82F6;\n  --color-silver: #C0C0C0;\n  --color-dark-gray: #1A1A1A;\n  --color-medium-gray: #2D2D2D;\n}\n\n/* Base styles */\nhtml {\n  scroll-behavior: smooth;\n}\n\nbody {\n  font-family: 'Inter', system-ui, -apple-system, sans-serif;\n  background-color: #000000;\n  color: #ffffff;\n  line-height: 1.6;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n/* Selection colors */\n::selection {\n  background-color: var(--color-neon-purple);\n  color: white;\n}\n\n::-moz-selection {\n  background-color: var(--color-neon-purple);\n  color: white;\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: var(--color-dark-gray);\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--color-medium-gray);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: var(--color-neon-purple);\n}\n\n/* Focus styles for accessibility */\n*:focus {\n  outline: 2px solid var(--color-neon-purple);\n  outline-offset: 2px;\n}\n\n/* Button focus improvements */\nbutton:focus,\na:focus {\n  outline: 2px solid var(--color-neon-purple);\n  outline-offset: 2px;\n}\n\n/* Reduced motion support */\n@media (prefers-reduced-motion: reduce) {\n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n  \n  html {\n    scroll-behavior: auto;\n  }\n}\n\n/* Custom animations */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(40px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes glow {\n  0% {\n    box-shadow: 0 0 20px rgba(139, 92, 246, 0.3);\n  }\n  100% {\n    box-shadow: 0 0 30px rgba(139, 92, 246, 0.6);\n  }\n}\n\n/* Utility classes */\n.fade-on-scroll {\n  opacity: 0;\n  transform: translateY(20px);\n  transition: opacity 0.6s ease-out, transform 0.6s ease-out;\n}\n\n.fade-on-scroll.animate-fade-in {\n  opacity: 1;\n  transform: translateY(0);\n}\n\n/* Typography improvements */\nh1, h2, h3, h4, h5, h6 {\n  line-height: 1.2;\n  font-weight: 600;\n  letter-spacing: -0.02em;\n}\n\n/* Code styling */\ncode {\n  background-color: var(--color-medium-gray);\n  padding: 0.2em 0.4em;\n  border-radius: 4px;\n  font-size: 0.9em;\n  font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', monospace;\n}\n\npre {\n  background-color: var(--color-dark-gray);\n  border: 1px solid var(--color-medium-gray);\n  border-radius: 8px;\n  padding: 1rem;\n  overflow-x: auto;\n  line-height: 1.5;\n}\n\npre code {\n  background: none;\n  padding: 0;\n  border-radius: 0;\n  font-size: inherit;\n}\n\n/* Link improvements */\na {\n  transition: color 0.2s ease-in-out;\n}\n\n/* Image optimizations */\nimg {\n  max-width: 100%;\n  height: auto;\n}\n\n/* Table styling */\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  margin: 1rem 0;\n}\n\nth, td {\n  padding: 0.75rem;\n  text-align: left;\n  border-bottom: 1px solid var(--color-medium-gray);\n}\n\nth {\n  font-weight: 600;\n  color: var(--color-neon-purple);\n}\n\n/* Blockquote styling */\nblockquote {\n  border-left: 4px solid var(--color-neon-purple);\n  padding-left: 1.5rem;\n  margin: 1.5rem 0;\n  font-style: italic;\n  color: #e5e5e5;\n}\n\n/* Form improvements */\ninput, textarea, select {\n  transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n}\n\ninput:focus, textarea:focus, select:focus {\n  border-color: var(--color-neon-purple);\n  box-shadow: 0 0 0 1px var(--color-neon-purple);\n}\n\n/* Loading states */\n.loading {\n  position: relative;\n  overflow: hidden;\n}\n\n.loading::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(\n    90deg,\n    transparent,\n    rgba(139, 92, 246, 0.2),\n    transparent\n  );\n  animation: loading 1.5s infinite;\n}\n\n@keyframes loading {\n  0% {\n    left: -100%;\n  }\n  100% {\n    left: 100%;\n  }\n}\n\n/* Custom gradient text utility */\n.gradient-text {\n  background: linear-gradient(\n    135deg,\n    var(--color-neon-purple),\n    var(--color-neon-pink),\n    var(--color-neon-blue)\n  );\n  -webkit-background-clip: text;\n  background-clip: text;\n  -webkit-text-fill-color: transparent;\n}\n\n/* Enhanced prose styles for MDX content */\n.prose {\n  color: #e5e5e5;\n}\n\n.prose h1, .prose h2, .prose h3, .prose h4 {\n  color: #ffffff;\n  margin-top: 2rem;\n  margin-bottom: 1rem;\n}\n\n.prose p {\n  margin-bottom: 1.5rem;\n}\n\n.prose ul, .prose ol {\n  margin-bottom: 1.5rem;\n  padding-left: 1.5rem;\n}\n\n.prose li {\n  margin-bottom: 0.5rem;\n}\n\n.prose a {\n  color: var(--color-neon-purple);\n  text-decoration: underline;\n  text-decoration-color: rgba(139, 92, 246, 0.3);\n  text-underline-offset: 2px;\n}\n\n.prose a:hover {\n  color: var(--color-neon-pink);\n  text-decoration-color: var(--color-neon-pink);\n}\n\n.prose strong {\n  color: #ffffff;\n  font-weight: 600;\n}\n\n.prose em {\n  color: #c0c0c0;\n}\n\n/* Print styles */\n@media print {\n  * {\n    background: white !important;\n    color: black !important;\n    box-shadow: none !important;\n  }\n  \n  .no-print {\n    display: none !important;\n  }\n}\n","size_bytes":5427},"src/utils/content.ts":{"content":"/**\n * Utility functions for content management and formatting\n */\n\nexport function formatDate(date: Date): string {\n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  });\n}\n\nexport function formatDateShort(date: Date): string {\n  return date.toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n  });\n}\n\nexport function getRelativeTime(date: Date): string {\n  const now = new Date();\n  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n  \n  if (diffInSeconds < 60) {\n    return 'just now';\n  }\n  \n  const diffInMinutes = Math.floor(diffInSeconds / 60);\n  if (diffInMinutes < 60) {\n    return `${diffInMinutes} minute${diffInMinutes === 1 ? '' : 's'} ago`;\n  }\n  \n  const diffInHours = Math.floor(diffInMinutes / 60);\n  if (diffInHours < 24) {\n    return `${diffInHours} hour${diffInHours === 1 ? '' : 's'} ago`;\n  }\n  \n  const diffInDays = Math.floor(diffInHours / 24);\n  if (diffInDays < 7) {\n    return `${diffInDays} day${diffInDays === 1 ? '' : 's'} ago`;\n  }\n  \n  const diffInWeeks = Math.floor(diffInDays / 7);\n  if (diffInWeeks < 4) {\n    return `${diffInWeeks} week${diffInWeeks === 1 ? '' : 's'} ago`;\n  }\n  \n  const diffInMonths = Math.floor(diffInDays / 30);\n  if (diffInMonths < 12) {\n    return `${diffInMonths} month${diffInMonths === 1 ? '' : 's'} ago`;\n  }\n  \n  const diffInYears = Math.floor(diffInDays / 365);\n  return `${diffInYears} year${diffInYears === 1 ? '' : 's'} ago`;\n}\n\nexport function generateExcerpt(content: string, maxLength: number = 150): string {\n  // Remove markdown syntax and HTML tags\n  const plainText = content\n    .replace(/#{1,6}\\s+/g, '') // Remove markdown headers\n    .replace(/\\*\\*(.*?)\\*\\*/g, '$1') // Remove bold markdown\n    .replace(/\\*(.*?)\\*/g, '$1') // Remove italic markdown\n    .replace(/`(.*?)`/g, '$1') // Remove inline code\n    .replace(/\\[(.*?)\\]\\(.*?\\)/g, '$1') // Remove links, keep text\n    .replace(/<[^>]*>/g, '') // Remove HTML tags\n    .trim();\n  \n  if (plainText.length <= maxLength) {\n    return plainText;\n  }\n  \n  // Find the last complete sentence within the limit\n  const truncated = plainText.substring(0, maxLength);\n  const lastSentenceEnd = Math.max(\n    truncated.lastIndexOf('.'),\n    truncated.lastIndexOf('!'),\n    truncated.lastIndexOf('?')\n  );\n  \n  if (lastSentenceEnd > maxLength * 0.6) {\n    return truncated.substring(0, lastSentenceEnd + 1);\n  }\n  \n  // If no good sentence break, find the last word boundary\n  const lastSpace = truncated.lastIndexOf(' ');\n  return truncated.substring(0, lastSpace) + '...';\n}\n\nexport function calculateReadingTime(content: string): number {\n  const wordsPerMinute = 200;\n  const words = content.trim().split(/\\s+/).length;\n  return Math.ceil(words / wordsPerMinute);\n}\n\nexport function slugify(text: string): string {\n  return text\n    .toLowerCase()\n    .trim()\n    .replace(/[^\\w\\s-]/g, '') // Remove special characters\n    .replace(/[\\s_-]+/g, '-') // Replace spaces and underscores with hyphens\n    .replace(/^-+|-+$/g, ''); // Remove leading/trailing hyphens\n}\n\nexport function getUniqueTagsFromPosts(posts: any[]): string[] {\n  const allTags = posts.flatMap(post => post.data?.tags || []);\n  return [...new Set(allTags)].sort();\n}\n\nexport function filterPostsByTag(posts: any[], tag: string): any[] {\n  return posts.filter(post => \n    post.data?.tags?.includes(tag)\n  );\n}\n\nexport function sortPostsByDate(posts: any[], direction: 'asc' | 'desc' = 'desc'): any[] {\n  return posts.sort((a, b) => {\n    const dateA = new Date(a.data.pubDate);\n    const dateB = new Date(b.data.pubDate);\n    \n    return direction === 'desc' \n      ? dateB.getTime() - dateA.getTime()\n      : dateA.getTime() - dateB.getTime();\n  });\n}\n\nexport function groupPostsByYear(posts: any[]): Record<string, any[]> {\n  return posts.reduce((acc, post) => {\n    const year = new Date(post.data.pubDate).getFullYear().toString();\n    if (!acc[year]) {\n      acc[year] = [];\n    }\n    acc[year].push(post);\n    return acc;\n  }, {} as Record<string, any[]>);\n}\n\nexport function createSearchIndex(posts: any[]) {\n  return posts.map(post => ({\n    slug: post.slug,\n    title: post.data.title,\n    description: post.data.description,\n    content: post.body || '',\n    tags: post.data.tags || [],\n    date: post.data.pubDate,\n  }));\n}\n\nexport function searchPosts(posts: any[], query: string): any[] {\n  if (!query.trim()) {\n    return posts;\n  }\n  \n  const searchTerms = query.toLowerCase().trim().split(/\\s+/);\n  \n  return posts.filter(post => {\n    const searchableText = [\n      post.data.title,\n      post.data.description,\n      ...(post.data.tags || []),\n      post.body || ''\n    ].join(' ').toLowerCase();\n    \n    return searchTerms.every(term => \n      searchableText.includes(term)\n    );\n  });\n}\n\nexport function validateEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\nexport function generatePageTitle(title: string, siteName: string = 'Nikos Dimitriadis'): string {\n  return title === siteName ? title : `${title} | ${siteName}`;\n}\n\nexport function generateMetaDescription(content: string, fallback: string = ''): string {\n  if (!content && !fallback) {\n    return 'Data Engineer & Software Engineer building elegant solutions at the intersection of data and technology.';\n  }\n  \n  const description = content || fallback;\n  const maxLength = 160;\n  \n  if (description.length <= maxLength) {\n    return description;\n  }\n  \n  const truncated = description.substring(0, maxLength - 3);\n  const lastSpace = truncated.lastIndexOf(' ');\n  \n  return truncated.substring(0, lastSpace) + '...';\n}\n\nexport function isValidUrl(string: string): boolean {\n  try {\n    new URL(string);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function sanitizeHtml(html: string): string {\n  // Basic HTML sanitization - in production, use a proper library like DOMPurify\n  return html\n    .replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n    .replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi, '')\n    .replace(/javascript:/gi, '')\n    .replace(/on\\w+\\s*=/gi, '');\n}\n","size_bytes":6187}}}